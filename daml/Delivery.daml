module Delivery where

import Types
import DA.Optional (isSome)
import DA.List (elemIndex)

type DeliveryBidRequestId = ContractId DeliveryBidRequest
type DeliveryBidId = ContractId DeliveryBid
type DeliveryContractId = ContractId DeliveryContract

template DeliveryRequest
  with
    foodCartId : Int
    app : Party
    deliveryBroker : Party
    pickupAddress : Address
    dropoffAddress : Address
  where
      signatory app
      observer deliveryBroker
      choice RequestBids : DeliveryBidRequestId
        with
          deliveryDrivers : [Party]
        controller deliveryBroker
        do
          create DeliveryBidRequest with
            foodCartId = foodCartId
            deliveryBroker = deliveryBroker
            deliveryDrivers = deliveryDrivers
            pickupAddress = pickupAddress
            dropoffAddress = dropoffAddress

template DeliveryBidRequest
  with
    foodCartId : Int
    deliveryBroker : Party
    deliveryDrivers: [Party]
    pickupAddress : Address
    dropoffAddress : Address
  where
    signatory deliveryBroker
    observer deliveryDrivers
    nonconsuming choice Bid : DeliveryBidId
      with
        deliveryDriver : Party
        fee : Decimal
      controller deliveryDriver
      do
        -- TODO: Why does this following not compile?
        -- assert "Only invited bidders may bid" (isSome (elemIndex deliveryDriver deliveryDrivers))
        create DeliveryBid with
          request = this
          deliveryDriver = deliveryDriver
          deliveryBroker = deliveryBroker
          fee = fee
          isRejected = False

template DeliveryBid
  with
    request : DeliveryBidRequest
    deliveryDriver : Party
    deliveryBroker: Party
    fee : Decimal
    -- Is there anything like default values?
    isRejected : Bool -- = False
  where
    signatory deliveryDriver
    observer deliveryBroker
    choice Accept : DeliveryContractId
      with
        app : Party
      controller deliveryBroker
      do
        create DeliveryContract with
          foodCartId = request.foodCartId
          deliveryDriver = deliveryDriver
          app = app
          deliveryBroker = deliveryBroker
          pickupAddress = request.pickupAddress
          dropoffAddress = request.dropoffAddress
          fee = fee
    choice Reject : DeliveryBidId
      controller deliveryBroker
      do
        create this with isRejected = True

template DeliveryContract
  with
    foodCartId : Int
    deliveryDriver : Party
    app : Party
    deliveryBroker: Party
    pickupAddress : Text
    dropoffAddress : Text
    fee : Decimal
  where
    signatory deliveryBroker
    observer deliveryDriver
    observer app
 